// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  chore: (where?: ChoreWhereInput) => Promise<boolean>;
  effortRating: (where?: EffortRatingWhereInput) => Promise<boolean>;
  household: (where?: HouseholdWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chore: (where: ChoreWhereUniqueInput) => ChoreNullablePromise;
  chores: (args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Chore>;
  choresConnection: (args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChoreConnectionPromise;
  effortRating: (
    where: EffortRatingWhereUniqueInput
  ) => EffortRatingNullablePromise;
  effortRatings: (args?: {
    where?: EffortRatingWhereInput;
    orderBy?: EffortRatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EffortRating>;
  effortRatingsConnection: (args?: {
    where?: EffortRatingWhereInput;
    orderBy?: EffortRatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EffortRatingConnectionPromise;
  household: (where: HouseholdWhereUniqueInput) => HouseholdNullablePromise;
  households: (args?: {
    where?: HouseholdWhereInput;
    orderBy?: HouseholdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Household>;
  householdsConnection: (args?: {
    where?: HouseholdWhereInput;
    orderBy?: HouseholdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HouseholdConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChore: (data: ChoreCreateInput) => ChorePromise;
  updateChore: (args: {
    data: ChoreUpdateInput;
    where: ChoreWhereUniqueInput;
  }) => ChorePromise;
  updateManyChores: (args: {
    data: ChoreUpdateManyMutationInput;
    where?: ChoreWhereInput;
  }) => BatchPayloadPromise;
  upsertChore: (args: {
    where: ChoreWhereUniqueInput;
    create: ChoreCreateInput;
    update: ChoreUpdateInput;
  }) => ChorePromise;
  deleteChore: (where: ChoreWhereUniqueInput) => ChorePromise;
  deleteManyChores: (where?: ChoreWhereInput) => BatchPayloadPromise;
  createEffortRating: (data: EffortRatingCreateInput) => EffortRatingPromise;
  updateEffortRating: (args: {
    data: EffortRatingUpdateInput;
    where: EffortRatingWhereUniqueInput;
  }) => EffortRatingPromise;
  updateManyEffortRatings: (args: {
    data: EffortRatingUpdateManyMutationInput;
    where?: EffortRatingWhereInput;
  }) => BatchPayloadPromise;
  upsertEffortRating: (args: {
    where: EffortRatingWhereUniqueInput;
    create: EffortRatingCreateInput;
    update: EffortRatingUpdateInput;
  }) => EffortRatingPromise;
  deleteEffortRating: (
    where: EffortRatingWhereUniqueInput
  ) => EffortRatingPromise;
  deleteManyEffortRatings: (
    where?: EffortRatingWhereInput
  ) => BatchPayloadPromise;
  createHousehold: (data: HouseholdCreateInput) => HouseholdPromise;
  updateHousehold: (args: {
    data: HouseholdUpdateInput;
    where: HouseholdWhereUniqueInput;
  }) => HouseholdPromise;
  updateManyHouseholds: (args: {
    data: HouseholdUpdateManyMutationInput;
    where?: HouseholdWhereInput;
  }) => BatchPayloadPromise;
  upsertHousehold: (args: {
    where: HouseholdWhereUniqueInput;
    create: HouseholdCreateInput;
    update: HouseholdUpdateInput;
  }) => HouseholdPromise;
  deleteHousehold: (where: HouseholdWhereUniqueInput) => HouseholdPromise;
  deleteManyHouseholds: (where?: HouseholdWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chore: (
    where?: ChoreSubscriptionWhereInput
  ) => ChoreSubscriptionPayloadSubscription;
  effortRating: (
    where?: EffortRatingSubscriptionWhereInput
  ) => EffortRatingSubscriptionPayloadSubscription;
  household: (
    where?: HouseholdSubscriptionWhereInput
  ) => HouseholdSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TodoState = "TODO" | "DONE" | "NOT_IN_TODO";

export type RecurrenceType = "AUTOMATIC" | "MANUAL" | "ONCE";

export type EffortRatingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "effort_ASC"
  | "effort_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type HouseholdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "googleId_ASC"
  | "googleId_DESC"
  | "email_ASC"
  | "email_DESC"
  | "givenName_ASC"
  | "givenName_DESC"
  | "familyName_ASC"
  | "familyName_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ChoreOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "todoState_ASC"
  | "todoState_DESC"
  | "dummy_ASC"
  | "dummy_DESC"
  | "isUpnext_ASC"
  | "isUpnext_DESC"
  | "recurrenceType_ASC"
  | "recurrenceType_DESC"
  | "recurringNextOccurence_ASC"
  | "recurringNextOccurence_DESC"
  | "recurringLastOccurence_ASC"
  | "recurringLastOccurence_DESC"
  | "recurringWeekCadence_ASC"
  | "recurringWeekCadence_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneWithoutChoresInput {
  create?: Maybe<UserCreateWithoutChoresInput>;
  update?: Maybe<UserUpdateWithoutChoresDataInput>;
  upsert?: Maybe<UserUpsertWithoutChoresInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type ChoreWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EffortRatingUpdateManyWithoutChoreInput {
  create?: Maybe<
    EffortRatingCreateWithoutChoreInput[] | EffortRatingCreateWithoutChoreInput
  >;
  delete?: Maybe<EffortRatingWhereUniqueInput[] | EffortRatingWhereUniqueInput>;
  connect?: Maybe<
    EffortRatingWhereUniqueInput[] | EffortRatingWhereUniqueInput
  >;
  set?: Maybe<EffortRatingWhereUniqueInput[] | EffortRatingWhereUniqueInput>;
  disconnect?: Maybe<
    EffortRatingWhereUniqueInput[] | EffortRatingWhereUniqueInput
  >;
  update?: Maybe<
    | EffortRatingUpdateWithWhereUniqueWithoutChoreInput[]
    | EffortRatingUpdateWithWhereUniqueWithoutChoreInput
  >;
  upsert?: Maybe<
    | EffortRatingUpsertWithWhereUniqueWithoutChoreInput[]
    | EffortRatingUpsertWithWhereUniqueWithoutChoreInput
  >;
  deleteMany?: Maybe<
    EffortRatingScalarWhereInput[] | EffortRatingScalarWhereInput
  >;
  updateMany?: Maybe<
    | EffortRatingUpdateManyWithWhereNestedInput[]
    | EffortRatingUpdateManyWithWhereNestedInput
  >;
}

export interface EffortRatingUpsertWithWhereUniqueWithoutChoreInput {
  where: EffortRatingWhereUniqueInput;
  update: EffortRatingUpdateWithoutChoreDataInput;
  create: EffortRatingCreateWithoutChoreInput;
}

export interface EffortRatingUpdateWithWhereUniqueWithoutChoreInput {
  where: EffortRatingWhereUniqueInput;
  data: EffortRatingUpdateWithoutChoreDataInput;
}

export interface UserUpdateManyWithoutHouseholdsInput {
  create?: Maybe<
    UserCreateWithoutHouseholdsInput[] | UserCreateWithoutHouseholdsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutHouseholdsInput[]
    | UserUpdateWithWhereUniqueWithoutHouseholdsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutHouseholdsInput[]
    | UserUpsertWithWhereUniqueWithoutHouseholdsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface EffortRatingUpdateWithoutChoreDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  effort?: Maybe<Int>;
}

export interface HouseholdSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HouseholdWhereInput>;
  AND?: Maybe<
    HouseholdSubscriptionWhereInput[] | HouseholdSubscriptionWhereInput
  >;
  OR?: Maybe<
    HouseholdSubscriptionWhereInput[] | HouseholdSubscriptionWhereInput
  >;
  NOT?: Maybe<
    HouseholdSubscriptionWhereInput[] | HouseholdSubscriptionWhereInput
  >;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EffortRatingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EffortRatingWhereInput>;
  AND?: Maybe<
    EffortRatingSubscriptionWhereInput[] | EffortRatingSubscriptionWhereInput
  >;
  OR?: Maybe<
    EffortRatingSubscriptionWhereInput[] | EffortRatingSubscriptionWhereInput
  >;
  NOT?: Maybe<
    EffortRatingSubscriptionWhereInput[] | EffortRatingSubscriptionWhereInput
  >;
}

export interface UserUpdateDataInput {
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name?: Maybe<String>;
  households?: Maybe<HouseholdUpdateManyWithoutMembersInput>;
  chores?: Maybe<ChoreUpdateManyWithoutAssigneeInput>;
  selectedHousehold?: Maybe<HouseholdUpdateOneInput>;
  lockedChores?: Maybe<ChoreUpdateManyWithoutLockedToUserInput>;
  invites?: Maybe<HouseholdUpdateManyWithoutInvitesInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  googleId?: Maybe<String>;
  googleId_not?: Maybe<String>;
  googleId_in?: Maybe<String[] | String>;
  googleId_not_in?: Maybe<String[] | String>;
  googleId_lt?: Maybe<String>;
  googleId_lte?: Maybe<String>;
  googleId_gt?: Maybe<String>;
  googleId_gte?: Maybe<String>;
  googleId_contains?: Maybe<String>;
  googleId_not_contains?: Maybe<String>;
  googleId_starts_with?: Maybe<String>;
  googleId_not_starts_with?: Maybe<String>;
  googleId_ends_with?: Maybe<String>;
  googleId_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  givenName?: Maybe<String>;
  givenName_not?: Maybe<String>;
  givenName_in?: Maybe<String[] | String>;
  givenName_not_in?: Maybe<String[] | String>;
  givenName_lt?: Maybe<String>;
  givenName_lte?: Maybe<String>;
  givenName_gt?: Maybe<String>;
  givenName_gte?: Maybe<String>;
  givenName_contains?: Maybe<String>;
  givenName_not_contains?: Maybe<String>;
  givenName_starts_with?: Maybe<String>;
  givenName_not_starts_with?: Maybe<String>;
  givenName_ends_with?: Maybe<String>;
  givenName_not_ends_with?: Maybe<String>;
  familyName?: Maybe<String>;
  familyName_not?: Maybe<String>;
  familyName_in?: Maybe<String[] | String>;
  familyName_not_in?: Maybe<String[] | String>;
  familyName_lt?: Maybe<String>;
  familyName_lte?: Maybe<String>;
  familyName_gt?: Maybe<String>;
  familyName_gte?: Maybe<String>;
  familyName_contains?: Maybe<String>;
  familyName_not_contains?: Maybe<String>;
  familyName_starts_with?: Maybe<String>;
  familyName_not_starts_with?: Maybe<String>;
  familyName_ends_with?: Maybe<String>;
  familyName_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  households_every?: Maybe<HouseholdWhereInput>;
  households_some?: Maybe<HouseholdWhereInput>;
  households_none?: Maybe<HouseholdWhereInput>;
  chores_every?: Maybe<ChoreWhereInput>;
  chores_some?: Maybe<ChoreWhereInput>;
  chores_none?: Maybe<ChoreWhereInput>;
  selectedHousehold?: Maybe<HouseholdWhereInput>;
  lockedChores_every?: Maybe<ChoreWhereInput>;
  lockedChores_some?: Maybe<ChoreWhereInput>;
  lockedChores_none?: Maybe<ChoreWhereInput>;
  invites_every?: Maybe<HouseholdWhereInput>;
  invites_some?: Maybe<HouseholdWhereInput>;
  invites_none?: Maybe<HouseholdWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface HouseholdUpdateManyWithoutMembersInput {
  create?: Maybe<
    HouseholdCreateWithoutMembersInput[] | HouseholdCreateWithoutMembersInput
  >;
  delete?: Maybe<HouseholdWhereUniqueInput[] | HouseholdWhereUniqueInput>;
  connect?: Maybe<HouseholdWhereUniqueInput[] | HouseholdWhereUniqueInput>;
  set?: Maybe<HouseholdWhereUniqueInput[] | HouseholdWhereUniqueInput>;
  disconnect?: Maybe<HouseholdWhereUniqueInput[] | HouseholdWhereUniqueInput>;
  update?: Maybe<
    | HouseholdUpdateWithWhereUniqueWithoutMembersInput[]
    | HouseholdUpdateWithWhereUniqueWithoutMembersInput
  >;
  upsert?: Maybe<
    | HouseholdUpsertWithWhereUniqueWithoutMembersInput[]
    | HouseholdUpsertWithWhereUniqueWithoutMembersInput
  >;
  deleteMany?: Maybe<HouseholdScalarWhereInput[] | HouseholdScalarWhereInput>;
  updateMany?: Maybe<
    | HouseholdUpdateManyWithWhereNestedInput[]
    | HouseholdUpdateManyWithWhereNestedInput
  >;
}

export interface EffortRatingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  effort?: Maybe<Int>;
  effort_not?: Maybe<Int>;
  effort_in?: Maybe<Int[] | Int>;
  effort_not_in?: Maybe<Int[] | Int>;
  effort_lt?: Maybe<Int>;
  effort_lte?: Maybe<Int>;
  effort_gt?: Maybe<Int>;
  effort_gte?: Maybe<Int>;
  chore?: Maybe<ChoreWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EffortRatingWhereInput[] | EffortRatingWhereInput>;
  OR?: Maybe<EffortRatingWhereInput[] | EffortRatingWhereInput>;
  NOT?: Maybe<EffortRatingWhereInput[] | EffortRatingWhereInput>;
}

export interface HouseholdUpdateWithWhereUniqueWithoutMembersInput {
  where: HouseholdWhereUniqueInput;
  data: HouseholdUpdateWithoutMembersDataInput;
}

export interface HouseholdUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface HouseholdUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  chores?: Maybe<ChoreUpdateManyWithoutHouseholdInput>;
  invites?: Maybe<UserUpdateManyWithoutInvitesInput>;
}

export interface EffortRatingUpdateManyMutationInput {
  effort?: Maybe<Int>;
}

export interface ChoreUpdateManyWithoutHouseholdInput {
  create?: Maybe<
    ChoreCreateWithoutHouseholdInput[] | ChoreCreateWithoutHouseholdInput
  >;
  delete?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  connect?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  set?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  disconnect?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  update?: Maybe<
    | ChoreUpdateWithWhereUniqueWithoutHouseholdInput[]
    | ChoreUpdateWithWhereUniqueWithoutHouseholdInput
  >;
  upsert?: Maybe<
    | ChoreUpsertWithWhereUniqueWithoutHouseholdInput[]
    | ChoreUpsertWithWhereUniqueWithoutHouseholdInput
  >;
  deleteMany?: Maybe<ChoreScalarWhereInput[] | ChoreScalarWhereInput>;
  updateMany?: Maybe<
    ChoreUpdateManyWithWhereNestedInput[] | ChoreUpdateManyWithWhereNestedInput
  >;
}

export type EffortRatingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChoreUpdateWithWhereUniqueWithoutHouseholdInput {
  where: ChoreWhereUniqueInput;
  data: ChoreUpdateWithoutHouseholdDataInput;
}

export interface ChoreUpdateOneRequiredWithoutEffortRatingsInput {
  create?: Maybe<ChoreCreateWithoutEffortRatingsInput>;
  update?: Maybe<ChoreUpdateWithoutEffortRatingsDataInput>;
  upsert?: Maybe<ChoreUpsertWithoutEffortRatingsInput>;
  connect?: Maybe<ChoreWhereUniqueInput>;
}

export interface ChoreUpdateWithoutHouseholdDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  effortRatings?: Maybe<EffortRatingUpdateManyWithoutChoreInput>;
  assignee?: Maybe<UserUpdateOneWithoutChoresInput>;
  lockedToUser?: Maybe<UserUpdateOneWithoutLockedChoresInput>;
  todoState?: Maybe<TodoState>;
  dummy?: Maybe<String>;
  isUpnext?: Maybe<Boolean>;
  recurrenceType?: Maybe<RecurrenceType>;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export type HouseholdWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EffortRatingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  effort?: Maybe<Int>;
  effort_not?: Maybe<Int>;
  effort_in?: Maybe<Int[] | Int>;
  effort_not_in?: Maybe<Int[] | Int>;
  effort_lt?: Maybe<Int>;
  effort_lte?: Maybe<Int>;
  effort_gt?: Maybe<Int>;
  effort_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EffortRatingScalarWhereInput[] | EffortRatingScalarWhereInput>;
  OR?: Maybe<EffortRatingScalarWhereInput[] | EffortRatingScalarWhereInput>;
  NOT?: Maybe<EffortRatingScalarWhereInput[] | EffortRatingScalarWhereInput>;
}

export interface ChoreCreateOneWithoutEffortRatingsInput {
  create?: Maybe<ChoreCreateWithoutEffortRatingsInput>;
  connect?: Maybe<ChoreWhereUniqueInput>;
}

export interface UserUpdateWithoutChoresDataInput {
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name?: Maybe<String>;
  households?: Maybe<HouseholdUpdateManyWithoutMembersInput>;
  selectedHousehold?: Maybe<HouseholdUpdateOneInput>;
  lockedChores?: Maybe<ChoreUpdateManyWithoutLockedToUserInput>;
  invites?: Maybe<HouseholdUpdateManyWithoutInvitesInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  googleId?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface HouseholdUpdateOneInput {
  create?: Maybe<HouseholdCreateInput>;
  update?: Maybe<HouseholdUpdateDataInput>;
  upsert?: Maybe<HouseholdUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<HouseholdWhereUniqueInput>;
}

export interface EffortRatingUpdateManyDataInput {
  effort?: Maybe<Int>;
}

export interface HouseholdUpdateDataInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyWithoutHouseholdsInput>;
  chores?: Maybe<ChoreUpdateManyWithoutHouseholdInput>;
  invites?: Maybe<UserUpdateManyWithoutInvitesInput>;
}

export interface EffortRatingCreateManyWithoutChoreInput {
  create?: Maybe<
    EffortRatingCreateWithoutChoreInput[] | EffortRatingCreateWithoutChoreInput
  >;
  connect?: Maybe<
    EffortRatingWhereUniqueInput[] | EffortRatingWhereUniqueInput
  >;
}

export interface ChoreWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  effortRatings_every?: Maybe<EffortRatingWhereInput>;
  effortRatings_some?: Maybe<EffortRatingWhereInput>;
  effortRatings_none?: Maybe<EffortRatingWhereInput>;
  household?: Maybe<HouseholdWhereInput>;
  assignee?: Maybe<UserWhereInput>;
  lockedToUser?: Maybe<UserWhereInput>;
  todoState?: Maybe<TodoState>;
  todoState_not?: Maybe<TodoState>;
  todoState_in?: Maybe<TodoState[] | TodoState>;
  todoState_not_in?: Maybe<TodoState[] | TodoState>;
  dummy?: Maybe<String>;
  dummy_not?: Maybe<String>;
  dummy_in?: Maybe<String[] | String>;
  dummy_not_in?: Maybe<String[] | String>;
  dummy_lt?: Maybe<String>;
  dummy_lte?: Maybe<String>;
  dummy_gt?: Maybe<String>;
  dummy_gte?: Maybe<String>;
  dummy_contains?: Maybe<String>;
  dummy_not_contains?: Maybe<String>;
  dummy_starts_with?: Maybe<String>;
  dummy_not_starts_with?: Maybe<String>;
  dummy_ends_with?: Maybe<String>;
  dummy_not_ends_with?: Maybe<String>;
  isUpnext?: Maybe<Boolean>;
  isUpnext_not?: Maybe<Boolean>;
  recurrenceType?: Maybe<RecurrenceType>;
  recurrenceType_not?: Maybe<RecurrenceType>;
  recurrenceType_in?: Maybe<RecurrenceType[] | RecurrenceType>;
  recurrenceType_not_in?: Maybe<RecurrenceType[] | RecurrenceType>;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringNextOccurence_not?: Maybe<DateTimeInput>;
  recurringNextOccurence_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  recurringNextOccurence_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  recurringNextOccurence_lt?: Maybe<DateTimeInput>;
  recurringNextOccurence_lte?: Maybe<DateTimeInput>;
  recurringNextOccurence_gt?: Maybe<DateTimeInput>;
  recurringNextOccurence_gte?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence_not?: Maybe<DateTimeInput>;
  recurringLastOccurence_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  recurringLastOccurence_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  recurringLastOccurence_lt?: Maybe<DateTimeInput>;
  recurringLastOccurence_lte?: Maybe<DateTimeInput>;
  recurringLastOccurence_gt?: Maybe<DateTimeInput>;
  recurringLastOccurence_gte?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
  recurringWeekCadence_not?: Maybe<Int>;
  recurringWeekCadence_in?: Maybe<Int[] | Int>;
  recurringWeekCadence_not_in?: Maybe<Int[] | Int>;
  recurringWeekCadence_lt?: Maybe<Int>;
  recurringWeekCadence_lte?: Maybe<Int>;
  recurringWeekCadence_gt?: Maybe<Int>;
  recurringWeekCadence_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ChoreWhereInput[] | ChoreWhereInput>;
  OR?: Maybe<ChoreWhereInput[] | ChoreWhereInput>;
  NOT?: Maybe<ChoreWhereInput[] | ChoreWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueWithoutHouseholdsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutHouseholdsDataInput;
}

export interface HouseholdCreateManyWithoutMembersInput {
  create?: Maybe<
    HouseholdCreateWithoutMembersInput[] | HouseholdCreateWithoutMembersInput
  >;
  connect?: Maybe<HouseholdWhereUniqueInput[] | HouseholdWhereUniqueInput>;
}

export interface UserUpdateWithoutHouseholdsDataInput {
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name?: Maybe<String>;
  chores?: Maybe<ChoreUpdateManyWithoutAssigneeInput>;
  selectedHousehold?: Maybe<HouseholdUpdateOneInput>;
  lockedChores?: Maybe<ChoreUpdateManyWithoutLockedToUserInput>;
  invites?: Maybe<HouseholdUpdateManyWithoutInvitesInput>;
}

export interface ChoreCreateManyWithoutHouseholdInput {
  create?: Maybe<
    ChoreCreateWithoutHouseholdInput[] | ChoreCreateWithoutHouseholdInput
  >;
  connect?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
}

export interface ChoreUpdateManyWithoutAssigneeInput {
  create?: Maybe<
    ChoreCreateWithoutAssigneeInput[] | ChoreCreateWithoutAssigneeInput
  >;
  delete?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  connect?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  set?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  disconnect?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  update?: Maybe<
    | ChoreUpdateWithWhereUniqueWithoutAssigneeInput[]
    | ChoreUpdateWithWhereUniqueWithoutAssigneeInput
  >;
  upsert?: Maybe<
    | ChoreUpsertWithWhereUniqueWithoutAssigneeInput[]
    | ChoreUpsertWithWhereUniqueWithoutAssigneeInput
  >;
  deleteMany?: Maybe<ChoreScalarWhereInput[] | ChoreScalarWhereInput>;
  updateMany?: Maybe<
    ChoreUpdateManyWithWhereNestedInput[] | ChoreUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneWithoutChoresInput {
  create?: Maybe<UserCreateWithoutChoresInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ChoreUpdateWithWhereUniqueWithoutAssigneeInput {
  where: ChoreWhereUniqueInput;
  data: ChoreUpdateWithoutAssigneeDataInput;
}

export interface HouseholdCreateOneInput {
  create?: Maybe<HouseholdCreateInput>;
  connect?: Maybe<HouseholdWhereUniqueInput>;
}

export interface ChoreUpdateWithoutAssigneeDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  effortRatings?: Maybe<EffortRatingUpdateManyWithoutChoreInput>;
  household?: Maybe<HouseholdUpdateOneRequiredWithoutChoresInput>;
  lockedToUser?: Maybe<UserUpdateOneWithoutLockedChoresInput>;
  todoState?: Maybe<TodoState>;
  dummy?: Maybe<String>;
  isUpnext?: Maybe<Boolean>;
  recurrenceType?: Maybe<RecurrenceType>;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface UserCreateManyWithoutHouseholdsInput {
  create?: Maybe<
    UserCreateWithoutHouseholdsInput[] | UserCreateWithoutHouseholdsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface HouseholdUpdateOneRequiredWithoutChoresInput {
  create?: Maybe<HouseholdCreateWithoutChoresInput>;
  update?: Maybe<HouseholdUpdateWithoutChoresDataInput>;
  upsert?: Maybe<HouseholdUpsertWithoutChoresInput>;
  connect?: Maybe<HouseholdWhereUniqueInput>;
}

export interface ChoreCreateManyWithoutAssigneeInput {
  create?: Maybe<
    ChoreCreateWithoutAssigneeInput[] | ChoreCreateWithoutAssigneeInput
  >;
  connect?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
}

export interface HouseholdUpdateWithoutChoresDataInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyWithoutHouseholdsInput>;
  invites?: Maybe<UserUpdateManyWithoutInvitesInput>;
}

export interface HouseholdCreateOneWithoutChoresInput {
  create?: Maybe<HouseholdCreateWithoutChoresInput>;
  connect?: Maybe<HouseholdWhereUniqueInput>;
}

export interface UserUpdateManyWithoutInvitesInput {
  create?: Maybe<
    UserCreateWithoutInvitesInput[] | UserCreateWithoutInvitesInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutInvitesInput[]
    | UserUpdateWithWhereUniqueWithoutInvitesInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutInvitesInput[]
    | UserUpsertWithWhereUniqueWithoutInvitesInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateManyWithoutInvitesInput {
  create?: Maybe<
    UserCreateWithoutInvitesInput[] | UserCreateWithoutInvitesInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueWithoutInvitesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutInvitesDataInput;
}

export interface ChoreCreateManyWithoutLockedToUserInput {
  create?: Maybe<
    ChoreCreateWithoutLockedToUserInput[] | ChoreCreateWithoutLockedToUserInput
  >;
  connect?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
}

export interface UserUpdateWithoutInvitesDataInput {
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name?: Maybe<String>;
  households?: Maybe<HouseholdUpdateManyWithoutMembersInput>;
  chores?: Maybe<ChoreUpdateManyWithoutAssigneeInput>;
  selectedHousehold?: Maybe<HouseholdUpdateOneInput>;
  lockedChores?: Maybe<ChoreUpdateManyWithoutLockedToUserInput>;
}

export interface UserCreateOneWithoutLockedChoresInput {
  create?: Maybe<UserCreateWithoutLockedChoresInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ChoreUpdateManyWithoutLockedToUserInput {
  create?: Maybe<
    ChoreCreateWithoutLockedToUserInput[] | ChoreCreateWithoutLockedToUserInput
  >;
  delete?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  connect?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  set?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  disconnect?: Maybe<ChoreWhereUniqueInput[] | ChoreWhereUniqueInput>;
  update?: Maybe<
    | ChoreUpdateWithWhereUniqueWithoutLockedToUserInput[]
    | ChoreUpdateWithWhereUniqueWithoutLockedToUserInput
  >;
  upsert?: Maybe<
    | ChoreUpsertWithWhereUniqueWithoutLockedToUserInput[]
    | ChoreUpsertWithWhereUniqueWithoutLockedToUserInput
  >;
  deleteMany?: Maybe<ChoreScalarWhereInput[] | ChoreScalarWhereInput>;
  updateMany?: Maybe<
    ChoreUpdateManyWithWhereNestedInput[] | ChoreUpdateManyWithWhereNestedInput
  >;
}

export interface HouseholdCreateManyWithoutInvitesInput {
  create?: Maybe<
    HouseholdCreateWithoutInvitesInput[] | HouseholdCreateWithoutInvitesInput
  >;
  connect?: Maybe<HouseholdWhereUniqueInput[] | HouseholdWhereUniqueInput>;
}

export interface ChoreUpdateWithWhereUniqueWithoutLockedToUserInput {
  where: ChoreWhereUniqueInput;
  data: ChoreUpdateWithoutLockedToUserDataInput;
}

export interface ChoreUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  effortRatings?: Maybe<EffortRatingUpdateManyWithoutChoreInput>;
  household?: Maybe<HouseholdUpdateOneRequiredWithoutChoresInput>;
  assignee?: Maybe<UserUpdateOneWithoutChoresInput>;
  lockedToUser?: Maybe<UserUpdateOneWithoutLockedChoresInput>;
  todoState?: Maybe<TodoState>;
  dummy?: Maybe<String>;
  isUpnext?: Maybe<Boolean>;
  recurrenceType?: Maybe<RecurrenceType>;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface ChoreUpdateWithoutLockedToUserDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  effortRatings?: Maybe<EffortRatingUpdateManyWithoutChoreInput>;
  household?: Maybe<HouseholdUpdateOneRequiredWithoutChoresInput>;
  assignee?: Maybe<UserUpdateOneWithoutChoresInput>;
  todoState?: Maybe<TodoState>;
  dummy?: Maybe<String>;
  isUpnext?: Maybe<Boolean>;
  recurrenceType?: Maybe<RecurrenceType>;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface HouseholdWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  chores_every?: Maybe<ChoreWhereInput>;
  chores_some?: Maybe<ChoreWhereInput>;
  chores_none?: Maybe<ChoreWhereInput>;
  invites_every?: Maybe<UserWhereInput>;
  invites_some?: Maybe<UserWhereInput>;
  invites_none?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<HouseholdWhereInput[] | HouseholdWhereInput>;
  OR?: Maybe<HouseholdWhereInput[] | HouseholdWhereInput>;
  NOT?: Maybe<HouseholdWhereInput[] | HouseholdWhereInput>;
}

export interface ChoreUpsertWithWhereUniqueWithoutLockedToUserInput {
  where: ChoreWhereUniqueInput;
  update: ChoreUpdateWithoutLockedToUserDataInput;
  create: ChoreCreateWithoutLockedToUserInput;
}

export interface UserUpdateManyMutationInput {
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ChoreScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  todoState?: Maybe<TodoState>;
  todoState_not?: Maybe<TodoState>;
  todoState_in?: Maybe<TodoState[] | TodoState>;
  todoState_not_in?: Maybe<TodoState[] | TodoState>;
  dummy?: Maybe<String>;
  dummy_not?: Maybe<String>;
  dummy_in?: Maybe<String[] | String>;
  dummy_not_in?: Maybe<String[] | String>;
  dummy_lt?: Maybe<String>;
  dummy_lte?: Maybe<String>;
  dummy_gt?: Maybe<String>;
  dummy_gte?: Maybe<String>;
  dummy_contains?: Maybe<String>;
  dummy_not_contains?: Maybe<String>;
  dummy_starts_with?: Maybe<String>;
  dummy_not_starts_with?: Maybe<String>;
  dummy_ends_with?: Maybe<String>;
  dummy_not_ends_with?: Maybe<String>;
  isUpnext?: Maybe<Boolean>;
  isUpnext_not?: Maybe<Boolean>;
  recurrenceType?: Maybe<RecurrenceType>;
  recurrenceType_not?: Maybe<RecurrenceType>;
  recurrenceType_in?: Maybe<RecurrenceType[] | RecurrenceType>;
  recurrenceType_not_in?: Maybe<RecurrenceType[] | RecurrenceType>;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringNextOccurence_not?: Maybe<DateTimeInput>;
  recurringNextOccurence_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  recurringNextOccurence_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  recurringNextOccurence_lt?: Maybe<DateTimeInput>;
  recurringNextOccurence_lte?: Maybe<DateTimeInput>;
  recurringNextOccurence_gt?: Maybe<DateTimeInput>;
  recurringNextOccurence_gte?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence_not?: Maybe<DateTimeInput>;
  recurringLastOccurence_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  recurringLastOccurence_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  recurringLastOccurence_lt?: Maybe<DateTimeInput>;
  recurringLastOccurence_lte?: Maybe<DateTimeInput>;
  recurringLastOccurence_gt?: Maybe<DateTimeInput>;
  recurringLastOccurence_gte?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
  recurringWeekCadence_not?: Maybe<Int>;
  recurringWeekCadence_in?: Maybe<Int[] | Int>;
  recurringWeekCadence_not_in?: Maybe<Int[] | Int>;
  recurringWeekCadence_lt?: Maybe<Int>;
  recurringWeekCadence_lte?: Maybe<Int>;
  recurringWeekCadence_gt?: Maybe<Int>;
  recurringWeekCadence_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ChoreScalarWhereInput[] | ChoreScalarWhereInput>;
  OR?: Maybe<ChoreScalarWhereInput[] | ChoreScalarWhereInput>;
  NOT?: Maybe<ChoreScalarWhereInput[] | ChoreScalarWhereInput>;
}

export interface HouseholdUpdateInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyWithoutHouseholdsInput>;
  chores?: Maybe<ChoreUpdateManyWithoutHouseholdInput>;
  invites?: Maybe<UserUpdateManyWithoutInvitesInput>;
}

export interface ChoreUpdateManyWithWhereNestedInput {
  where: ChoreScalarWhereInput;
  data: ChoreUpdateManyDataInput;
}

export interface ChoreUpdateWithoutEffortRatingsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  household?: Maybe<HouseholdUpdateOneRequiredWithoutChoresInput>;
  assignee?: Maybe<UserUpdateOneWithoutChoresInput>;
  lockedToUser?: Maybe<UserUpdateOneWithoutLockedChoresInput>;
  todoState?: Maybe<TodoState>;
  dummy?: Maybe<String>;
  isUpnext?: Maybe<Boolean>;
  recurrenceType?: Maybe<RecurrenceType>;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface ChoreUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  todoState?: Maybe<TodoState>;
  dummy?: Maybe<String>;
  isUpnext?: Maybe<Boolean>;
  recurrenceType?: Maybe<RecurrenceType>;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface ChoreCreateWithoutEffortRatingsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  household: HouseholdCreateOneWithoutChoresInput;
  assignee?: Maybe<UserCreateOneWithoutChoresInput>;
  lockedToUser?: Maybe<UserCreateOneWithoutLockedChoresInput>;
  todoState: TodoState;
  dummy?: Maybe<String>;
  isUpnext: Boolean;
  recurrenceType: RecurrenceType;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface UserUpsertWithWhereUniqueWithoutInvitesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutInvitesDataInput;
  create: UserCreateWithoutInvitesInput;
}

export interface ChoreUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  todoState?: Maybe<TodoState>;
  dummy?: Maybe<String>;
  isUpnext?: Maybe<Boolean>;
  recurrenceType?: Maybe<RecurrenceType>;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  googleId?: Maybe<String>;
  googleId_not?: Maybe<String>;
  googleId_in?: Maybe<String[] | String>;
  googleId_not_in?: Maybe<String[] | String>;
  googleId_lt?: Maybe<String>;
  googleId_lte?: Maybe<String>;
  googleId_gt?: Maybe<String>;
  googleId_gte?: Maybe<String>;
  googleId_contains?: Maybe<String>;
  googleId_not_contains?: Maybe<String>;
  googleId_starts_with?: Maybe<String>;
  googleId_not_starts_with?: Maybe<String>;
  googleId_ends_with?: Maybe<String>;
  googleId_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  givenName?: Maybe<String>;
  givenName_not?: Maybe<String>;
  givenName_in?: Maybe<String[] | String>;
  givenName_not_in?: Maybe<String[] | String>;
  givenName_lt?: Maybe<String>;
  givenName_lte?: Maybe<String>;
  givenName_gt?: Maybe<String>;
  givenName_gte?: Maybe<String>;
  givenName_contains?: Maybe<String>;
  givenName_not_contains?: Maybe<String>;
  givenName_starts_with?: Maybe<String>;
  givenName_not_starts_with?: Maybe<String>;
  givenName_ends_with?: Maybe<String>;
  givenName_not_ends_with?: Maybe<String>;
  familyName?: Maybe<String>;
  familyName_not?: Maybe<String>;
  familyName_in?: Maybe<String[] | String>;
  familyName_not_in?: Maybe<String[] | String>;
  familyName_lt?: Maybe<String>;
  familyName_lte?: Maybe<String>;
  familyName_gt?: Maybe<String>;
  familyName_gte?: Maybe<String>;
  familyName_contains?: Maybe<String>;
  familyName_not_contains?: Maybe<String>;
  familyName_starts_with?: Maybe<String>;
  familyName_not_starts_with?: Maybe<String>;
  familyName_ends_with?: Maybe<String>;
  familyName_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface ChoreCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  effortRatings?: Maybe<EffortRatingCreateManyWithoutChoreInput>;
  household: HouseholdCreateOneWithoutChoresInput;
  assignee?: Maybe<UserCreateOneWithoutChoresInput>;
  lockedToUser?: Maybe<UserCreateOneWithoutLockedChoresInput>;
  todoState: TodoState;
  dummy?: Maybe<String>;
  isUpnext: Boolean;
  recurrenceType: RecurrenceType;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  googleId?: Maybe<String>;
  email: String;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name: String;
  households?: Maybe<HouseholdCreateManyWithoutMembersInput>;
  chores?: Maybe<ChoreCreateManyWithoutAssigneeInput>;
  selectedHousehold?: Maybe<HouseholdCreateOneInput>;
  lockedChores?: Maybe<ChoreCreateManyWithoutLockedToUserInput>;
  invites?: Maybe<HouseholdCreateManyWithoutInvitesInput>;
}

export interface UserUpdateManyDataInput {
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ChoreCreateWithoutHouseholdInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  effortRatings?: Maybe<EffortRatingCreateManyWithoutChoreInput>;
  assignee?: Maybe<UserCreateOneWithoutChoresInput>;
  lockedToUser?: Maybe<UserCreateOneWithoutLockedChoresInput>;
  todoState: TodoState;
  dummy?: Maybe<String>;
  isUpnext: Boolean;
  recurrenceType: RecurrenceType;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface HouseholdUpsertWithoutChoresInput {
  update: HouseholdUpdateWithoutChoresDataInput;
  create: HouseholdCreateWithoutChoresInput;
}

export interface HouseholdCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  members?: Maybe<UserCreateManyWithoutHouseholdsInput>;
  chores?: Maybe<ChoreCreateManyWithoutHouseholdInput>;
  invites?: Maybe<UserCreateManyWithoutInvitesInput>;
}

export interface UserUpdateOneWithoutLockedChoresInput {
  create?: Maybe<UserCreateWithoutLockedChoresInput>;
  update?: Maybe<UserUpdateWithoutLockedChoresDataInput>;
  upsert?: Maybe<UserUpsertWithoutLockedChoresInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ChoreCreateWithoutAssigneeInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  effortRatings?: Maybe<EffortRatingCreateManyWithoutChoreInput>;
  household: HouseholdCreateOneWithoutChoresInput;
  lockedToUser?: Maybe<UserCreateOneWithoutLockedChoresInput>;
  todoState: TodoState;
  dummy?: Maybe<String>;
  isUpnext: Boolean;
  recurrenceType: RecurrenceType;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface UserUpdateWithoutLockedChoresDataInput {
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name?: Maybe<String>;
  households?: Maybe<HouseholdUpdateManyWithoutMembersInput>;
  chores?: Maybe<ChoreUpdateManyWithoutAssigneeInput>;
  selectedHousehold?: Maybe<HouseholdUpdateOneInput>;
  invites?: Maybe<HouseholdUpdateManyWithoutInvitesInput>;
}

export interface UserCreateWithoutInvitesInput {
  id?: Maybe<ID_Input>;
  googleId?: Maybe<String>;
  email: String;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name: String;
  households?: Maybe<HouseholdCreateManyWithoutMembersInput>;
  chores?: Maybe<ChoreCreateManyWithoutAssigneeInput>;
  selectedHousehold?: Maybe<HouseholdCreateOneInput>;
  lockedChores?: Maybe<ChoreCreateManyWithoutLockedToUserInput>;
}

export interface HouseholdUpdateManyWithoutInvitesInput {
  create?: Maybe<
    HouseholdCreateWithoutInvitesInput[] | HouseholdCreateWithoutInvitesInput
  >;
  delete?: Maybe<HouseholdWhereUniqueInput[] | HouseholdWhereUniqueInput>;
  connect?: Maybe<HouseholdWhereUniqueInput[] | HouseholdWhereUniqueInput>;
  set?: Maybe<HouseholdWhereUniqueInput[] | HouseholdWhereUniqueInput>;
  disconnect?: Maybe<HouseholdWhereUniqueInput[] | HouseholdWhereUniqueInput>;
  update?: Maybe<
    | HouseholdUpdateWithWhereUniqueWithoutInvitesInput[]
    | HouseholdUpdateWithWhereUniqueWithoutInvitesInput
  >;
  upsert?: Maybe<
    | HouseholdUpsertWithWhereUniqueWithoutInvitesInput[]
    | HouseholdUpsertWithWhereUniqueWithoutInvitesInput
  >;
  deleteMany?: Maybe<HouseholdScalarWhereInput[] | HouseholdScalarWhereInput>;
  updateMany?: Maybe<
    | HouseholdUpdateManyWithWhereNestedInput[]
    | HouseholdUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateWithoutLockedChoresInput {
  id?: Maybe<ID_Input>;
  googleId?: Maybe<String>;
  email: String;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name: String;
  households?: Maybe<HouseholdCreateManyWithoutMembersInput>;
  chores?: Maybe<ChoreCreateManyWithoutAssigneeInput>;
  selectedHousehold?: Maybe<HouseholdCreateOneInput>;
  invites?: Maybe<HouseholdCreateManyWithoutInvitesInput>;
}

export interface HouseholdUpdateWithWhereUniqueWithoutInvitesInput {
  where: HouseholdWhereUniqueInput;
  data: HouseholdUpdateWithoutInvitesDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface HouseholdUpdateWithoutInvitesDataInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyWithoutHouseholdsInput>;
  chores?: Maybe<ChoreUpdateManyWithoutHouseholdInput>;
}

export interface UserUpdateInput {
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name?: Maybe<String>;
  households?: Maybe<HouseholdUpdateManyWithoutMembersInput>;
  chores?: Maybe<ChoreUpdateManyWithoutAssigneeInput>;
  selectedHousehold?: Maybe<HouseholdUpdateOneInput>;
  lockedChores?: Maybe<ChoreUpdateManyWithoutLockedToUserInput>;
  invites?: Maybe<HouseholdUpdateManyWithoutInvitesInput>;
}

export interface HouseholdUpsertWithWhereUniqueWithoutInvitesInput {
  where: HouseholdWhereUniqueInput;
  update: HouseholdUpdateWithoutInvitesDataInput;
  create: HouseholdCreateWithoutInvitesInput;
}

export interface EffortRatingUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  effort?: Maybe<Int>;
  chore?: Maybe<ChoreUpdateOneRequiredWithoutEffortRatingsInput>;
}

export interface HouseholdScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<HouseholdScalarWhereInput[] | HouseholdScalarWhereInput>;
  OR?: Maybe<HouseholdScalarWhereInput[] | HouseholdScalarWhereInput>;
  NOT?: Maybe<HouseholdScalarWhereInput[] | HouseholdScalarWhereInput>;
}

export interface EffortRatingUpdateManyWithWhereNestedInput {
  where: EffortRatingScalarWhereInput;
  data: EffortRatingUpdateManyDataInput;
}

export interface HouseholdUpdateManyWithWhereNestedInput {
  where: HouseholdScalarWhereInput;
  data: HouseholdUpdateManyDataInput;
}

export interface HouseholdCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  chores?: Maybe<ChoreCreateManyWithoutHouseholdInput>;
  invites?: Maybe<UserCreateManyWithoutInvitesInput>;
}

export interface HouseholdUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserCreateWithoutHouseholdsInput {
  id?: Maybe<ID_Input>;
  googleId?: Maybe<String>;
  email: String;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name: String;
  chores?: Maybe<ChoreCreateManyWithoutAssigneeInput>;
  selectedHousehold?: Maybe<HouseholdCreateOneInput>;
  lockedChores?: Maybe<ChoreCreateManyWithoutLockedToUserInput>;
  invites?: Maybe<HouseholdCreateManyWithoutInvitesInput>;
}

export interface UserUpsertWithoutLockedChoresInput {
  update: UserUpdateWithoutLockedChoresDataInput;
  create: UserCreateWithoutLockedChoresInput;
}

export interface ChoreCreateWithoutLockedToUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  effortRatings?: Maybe<EffortRatingCreateManyWithoutChoreInput>;
  household: HouseholdCreateOneWithoutChoresInput;
  assignee?: Maybe<UserCreateOneWithoutChoresInput>;
  todoState: TodoState;
  dummy?: Maybe<String>;
  isUpnext: Boolean;
  recurrenceType: RecurrenceType;
  recurringNextOccurence?: Maybe<DateTimeInput>;
  recurringLastOccurence?: Maybe<DateTimeInput>;
  recurringWeekCadence?: Maybe<Int>;
}

export interface ChoreUpsertWithWhereUniqueWithoutAssigneeInput {
  where: ChoreWhereUniqueInput;
  update: ChoreUpdateWithoutAssigneeDataInput;
  create: ChoreCreateWithoutAssigneeInput;
}

export interface ChoreSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChoreWhereInput>;
  AND?: Maybe<ChoreSubscriptionWhereInput[] | ChoreSubscriptionWhereInput>;
  OR?: Maybe<ChoreSubscriptionWhereInput[] | ChoreSubscriptionWhereInput>;
  NOT?: Maybe<ChoreSubscriptionWhereInput[] | ChoreSubscriptionWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutHouseholdsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutHouseholdsDataInput;
  create: UserCreateWithoutHouseholdsInput;
}

export interface EffortRatingCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  effort: Int;
  chore: ChoreCreateOneWithoutEffortRatingsInput;
}

export interface HouseholdUpsertNestedInput {
  update: HouseholdUpdateDataInput;
  create: HouseholdCreateInput;
}

export interface UserCreateWithoutChoresInput {
  id?: Maybe<ID_Input>;
  googleId?: Maybe<String>;
  email: String;
  givenName?: Maybe<String>;
  familyName?: Maybe<String>;
  name: String;
  households?: Maybe<HouseholdCreateManyWithoutMembersInput>;
  selectedHousehold?: Maybe<HouseholdCreateOneInput>;
  lockedChores?: Maybe<ChoreCreateManyWithoutLockedToUserInput>;
  invites?: Maybe<HouseholdCreateManyWithoutInvitesInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface HouseholdUpsertWithWhereUniqueWithoutMembersInput {
  where: HouseholdWhereUniqueInput;
  update: HouseholdUpdateWithoutMembersDataInput;
  create: HouseholdCreateWithoutMembersInput;
}

export interface ChoreUpsertWithWhereUniqueWithoutHouseholdInput {
  where: ChoreWhereUniqueInput;
  update: ChoreUpdateWithoutHouseholdDataInput;
  create: ChoreCreateWithoutHouseholdInput;
}

export interface UserUpsertWithoutChoresInput {
  update: UserUpdateWithoutChoresDataInput;
  create: UserCreateWithoutChoresInput;
}

export interface HouseholdCreateWithoutChoresInput {
  id?: Maybe<ID_Input>;
  name: String;
  members?: Maybe<UserCreateManyWithoutHouseholdsInput>;
  invites?: Maybe<UserCreateManyWithoutInvitesInput>;
}

export interface EffortRatingCreateWithoutChoreInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  effort: Int;
}

export interface ChoreUpsertWithoutEffortRatingsInput {
  update: ChoreUpdateWithoutEffortRatingsDataInput;
  create: ChoreCreateWithoutEffortRatingsInput;
}

export interface HouseholdCreateWithoutInvitesInput {
  id?: Maybe<ID_Input>;
  name: String;
  members?: Maybe<UserCreateManyWithoutHouseholdsInput>;
  chores?: Maybe<ChoreCreateManyWithoutHouseholdInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  googleId?: String;
  email: String;
  givenName?: String;
  familyName?: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  googleId: () => Promise<String>;
  email: () => Promise<String>;
  givenName: () => Promise<String>;
  familyName: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  googleId: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  givenName: () => Promise<AsyncIterator<String>>;
  familyName: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChoreEdge {
  node: Chore;
  cursor: String;
}

export interface ChoreEdgePromise extends Promise<ChoreEdge>, Fragmentable {
  node: <T = ChorePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChoreEdgeSubscription
  extends Promise<AsyncIterator<ChoreEdge>>,
    Fragmentable {
  node: <T = ChoreSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface HouseholdSubscriptionPayload {
  mutation: MutationType;
  node: Household;
  updatedFields: String[];
  previousValues: HouseholdPreviousValues;
}

export interface HouseholdSubscriptionPayloadPromise
  extends Promise<HouseholdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HouseholdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HouseholdPreviousValuesPromise>() => T;
}

export interface HouseholdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HouseholdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HouseholdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HouseholdPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChoreConnection {
  pageInfo: PageInfo;
  edges: ChoreEdge[];
}

export interface ChoreConnectionPromise
  extends Promise<ChoreConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChoreEdge>>() => T;
  aggregate: <T = AggregateChorePromise>() => T;
}

export interface ChoreConnectionSubscription
  extends Promise<AsyncIterator<ChoreConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChoreEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChoreSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface HouseholdPreviousValues {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface HouseholdPreviousValuesPromise
  extends Promise<HouseholdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface HouseholdPreviousValuesSubscription
  extends Promise<AsyncIterator<HouseholdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Household {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface HouseholdPromise extends Promise<Household>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chores: <T = FragmentableArray<Chore>>(args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invites: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface HouseholdSubscription
  extends Promise<AsyncIterator<Household>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chores: <T = Promise<AsyncIterator<ChoreSubscription>>>(args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invites: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HouseholdNullablePromise
  extends Promise<Household | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chores: <T = FragmentableArray<Chore>>(args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invites: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface HouseholdEdge {
  node: Household;
  cursor: String;
}

export interface HouseholdEdgePromise
  extends Promise<HouseholdEdge>,
    Fragmentable {
  node: <T = HouseholdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HouseholdEdgeSubscription
  extends Promise<AsyncIterator<HouseholdEdge>>,
    Fragmentable {
  node: <T = HouseholdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  googleId?: String;
  email: String;
  givenName?: String;
  familyName?: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  googleId: () => Promise<String>;
  email: () => Promise<String>;
  givenName: () => Promise<String>;
  familyName: () => Promise<String>;
  name: () => Promise<String>;
  households: <T = FragmentableArray<Household>>(args?: {
    where?: HouseholdWhereInput;
    orderBy?: HouseholdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chores: <T = FragmentableArray<Chore>>(args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  selectedHousehold: <T = HouseholdPromise>() => T;
  lockedChores: <T = FragmentableArray<Chore>>(args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invites: <T = FragmentableArray<Household>>(args?: {
    where?: HouseholdWhereInput;
    orderBy?: HouseholdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  googleId: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  givenName: () => Promise<AsyncIterator<String>>;
  familyName: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  households: <T = Promise<AsyncIterator<HouseholdSubscription>>>(args?: {
    where?: HouseholdWhereInput;
    orderBy?: HouseholdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chores: <T = Promise<AsyncIterator<ChoreSubscription>>>(args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  selectedHousehold: <T = HouseholdSubscription>() => T;
  lockedChores: <T = Promise<AsyncIterator<ChoreSubscription>>>(args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invites: <T = Promise<AsyncIterator<HouseholdSubscription>>>(args?: {
    where?: HouseholdWhereInput;
    orderBy?: HouseholdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  googleId: () => Promise<String>;
  email: () => Promise<String>;
  givenName: () => Promise<String>;
  familyName: () => Promise<String>;
  name: () => Promise<String>;
  households: <T = FragmentableArray<Household>>(args?: {
    where?: HouseholdWhereInput;
    orderBy?: HouseholdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chores: <T = FragmentableArray<Chore>>(args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  selectedHousehold: <T = HouseholdPromise>() => T;
  lockedChores: <T = FragmentableArray<Chore>>(args?: {
    where?: ChoreWhereInput;
    orderBy?: ChoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invites: <T = FragmentableArray<Household>>(args?: {
    where?: HouseholdWhereInput;
    orderBy?: HouseholdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateEffortRating {
  count: Int;
}

export interface AggregateEffortRatingPromise
  extends Promise<AggregateEffortRating>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEffortRatingSubscription
  extends Promise<AsyncIterator<AggregateEffortRating>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chore {
  id: ID_Output;
  name: String;
  description?: String;
  todoState: TodoState;
  dummy?: String;
  isUpnext: Boolean;
  recurrenceType: RecurrenceType;
  recurringNextOccurence?: DateTimeOutput;
  recurringLastOccurence?: DateTimeOutput;
  recurringWeekCadence?: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ChorePromise extends Promise<Chore>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  effortRatings: <T = FragmentableArray<EffortRating>>(args?: {
    where?: EffortRatingWhereInput;
    orderBy?: EffortRatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  household: <T = HouseholdPromise>() => T;
  assignee: <T = UserPromise>() => T;
  lockedToUser: <T = UserPromise>() => T;
  todoState: () => Promise<TodoState>;
  dummy: () => Promise<String>;
  isUpnext: () => Promise<Boolean>;
  recurrenceType: () => Promise<RecurrenceType>;
  recurringNextOccurence: () => Promise<DateTimeOutput>;
  recurringLastOccurence: () => Promise<DateTimeOutput>;
  recurringWeekCadence: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ChoreSubscription
  extends Promise<AsyncIterator<Chore>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  effortRatings: <T = Promise<AsyncIterator<EffortRatingSubscription>>>(args?: {
    where?: EffortRatingWhereInput;
    orderBy?: EffortRatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  household: <T = HouseholdSubscription>() => T;
  assignee: <T = UserSubscription>() => T;
  lockedToUser: <T = UserSubscription>() => T;
  todoState: () => Promise<AsyncIterator<TodoState>>;
  dummy: () => Promise<AsyncIterator<String>>;
  isUpnext: () => Promise<AsyncIterator<Boolean>>;
  recurrenceType: () => Promise<AsyncIterator<RecurrenceType>>;
  recurringNextOccurence: () => Promise<AsyncIterator<DateTimeOutput>>;
  recurringLastOccurence: () => Promise<AsyncIterator<DateTimeOutput>>;
  recurringWeekCadence: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChoreNullablePromise
  extends Promise<Chore | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  effortRatings: <T = FragmentableArray<EffortRating>>(args?: {
    where?: EffortRatingWhereInput;
    orderBy?: EffortRatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  household: <T = HouseholdPromise>() => T;
  assignee: <T = UserPromise>() => T;
  lockedToUser: <T = UserPromise>() => T;
  todoState: () => Promise<TodoState>;
  dummy: () => Promise<String>;
  isUpnext: () => Promise<Boolean>;
  recurrenceType: () => Promise<RecurrenceType>;
  recurringNextOccurence: () => Promise<DateTimeOutput>;
  recurringLastOccurence: () => Promise<DateTimeOutput>;
  recurringWeekCadence: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EffortRatingConnection {
  pageInfo: PageInfo;
  edges: EffortRatingEdge[];
}

export interface EffortRatingConnectionPromise
  extends Promise<EffortRatingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EffortRatingEdge>>() => T;
  aggregate: <T = AggregateEffortRatingPromise>() => T;
}

export interface EffortRatingConnectionSubscription
  extends Promise<AsyncIterator<EffortRatingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EffortRatingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEffortRatingSubscription>() => T;
}

export interface ChoreSubscriptionPayload {
  mutation: MutationType;
  node: Chore;
  updatedFields: String[];
  previousValues: ChorePreviousValues;
}

export interface ChoreSubscriptionPayloadPromise
  extends Promise<ChoreSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChorePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChorePreviousValuesPromise>() => T;
}

export interface ChoreSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChoreSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChoreSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChorePreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHousehold {
  count: Int;
}

export interface AggregateHouseholdPromise
  extends Promise<AggregateHousehold>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHouseholdSubscription
  extends Promise<AsyncIterator<AggregateHousehold>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EffortRatingPreviousValues {
  id: ID_Output;
  effort: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface EffortRatingPreviousValuesPromise
  extends Promise<EffortRatingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  effort: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EffortRatingPreviousValuesSubscription
  extends Promise<AsyncIterator<EffortRatingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  effort: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EffortRatingSubscriptionPayload {
  mutation: MutationType;
  node: EffortRating;
  updatedFields: String[];
  previousValues: EffortRatingPreviousValues;
}

export interface EffortRatingSubscriptionPayloadPromise
  extends Promise<EffortRatingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EffortRatingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EffortRatingPreviousValuesPromise>() => T;
}

export interface EffortRatingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EffortRatingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EffortRatingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EffortRatingPreviousValuesSubscription>() => T;
}

export interface EffortRating {
  id: ID_Output;
  effort: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface EffortRatingPromise
  extends Promise<EffortRating>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  effort: () => Promise<Int>;
  chore: <T = ChorePromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EffortRatingSubscription
  extends Promise<AsyncIterator<EffortRating>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  effort: () => Promise<AsyncIterator<Int>>;
  chore: <T = ChoreSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EffortRatingNullablePromise
  extends Promise<EffortRating | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  effort: () => Promise<Int>;
  chore: <T = ChorePromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ChorePreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  todoState: TodoState;
  dummy?: String;
  isUpnext: Boolean;
  recurrenceType: RecurrenceType;
  recurringNextOccurence?: DateTimeOutput;
  recurringLastOccurence?: DateTimeOutput;
  recurringWeekCadence?: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ChorePreviousValuesPromise
  extends Promise<ChorePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  todoState: () => Promise<TodoState>;
  dummy: () => Promise<String>;
  isUpnext: () => Promise<Boolean>;
  recurrenceType: () => Promise<RecurrenceType>;
  recurringNextOccurence: () => Promise<DateTimeOutput>;
  recurringLastOccurence: () => Promise<DateTimeOutput>;
  recurringWeekCadence: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ChorePreviousValuesSubscription
  extends Promise<AsyncIterator<ChorePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  todoState: () => Promise<AsyncIterator<TodoState>>;
  dummy: () => Promise<AsyncIterator<String>>;
  isUpnext: () => Promise<AsyncIterator<Boolean>>;
  recurrenceType: () => Promise<AsyncIterator<RecurrenceType>>;
  recurringNextOccurence: () => Promise<AsyncIterator<DateTimeOutput>>;
  recurringLastOccurence: () => Promise<AsyncIterator<DateTimeOutput>>;
  recurringWeekCadence: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HouseholdConnection {
  pageInfo: PageInfo;
  edges: HouseholdEdge[];
}

export interface HouseholdConnectionPromise
  extends Promise<HouseholdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HouseholdEdge>>() => T;
  aggregate: <T = AggregateHouseholdPromise>() => T;
}

export interface HouseholdConnectionSubscription
  extends Promise<AsyncIterator<HouseholdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HouseholdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHouseholdSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateChore {
  count: Int;
}

export interface AggregateChorePromise
  extends Promise<AggregateChore>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChoreSubscription
  extends Promise<AsyncIterator<AggregateChore>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EffortRatingEdge {
  node: EffortRating;
  cursor: String;
}

export interface EffortRatingEdgePromise
  extends Promise<EffortRatingEdge>,
    Fragmentable {
  node: <T = EffortRatingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EffortRatingEdgeSubscription
  extends Promise<AsyncIterator<EffortRatingEdge>>,
    Fragmentable {
  node: <T = EffortRatingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Household",
    embedded: false
  },
  {
    name: "Chore",
    embedded: false
  },
  {
    name: "EffortRating",
    embedded: false
  },
  {
    name: "RecurrenceType",
    embedded: false
  },
  {
    name: "TodoState",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
