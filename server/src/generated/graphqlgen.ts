// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  Chore,
  EffortRating,
  User,
  Household,
  ChoreSubscriptionPayload,
  ChorePreviousValues
} from "./prisma-client/index";
import { Context } from "../types";

export type ChoreStatus = "UPNEXT" | "ARCHIVE" | "RECURRING" | "TODO" | "DONE";
export type TodoState = "TODO" | "DONE" | "NOT_IN_TODO";
export type RecurrenceType = "AUTOMATIC" | "MANUAL" | "ONCE";
export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ChoreFilter {
    households?: Array<string | null> | null;
    status?: Array<ChoreStatus | null> | null;
  }

  export interface ArgsChore {
    id: string;
  }

  export interface ArgsHousehold {
    id: string;
  }

  export interface ArgsUser {
    id: string;
  }

  export interface ArgsUserByEmail {
    email: string;
  }

  export interface ArgsChores {
    filter?: ChoreFilter | null;
  }

  export interface ArgsUnvotedChores {
    filter?: ChoreFilter | null;
  }

  export type ChoreResolver = (
    parent: undefined,
    args: ArgsChore,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore | null | Promise<Chore | null>;

  export type HouseholdResolver = (
    parent: undefined,
    args: ArgsHousehold,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Household | null | Promise<Household | null>;

  export type UserResolver = (
    parent: undefined,
    args: ArgsUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type UserByEmailResolver = (
    parent: undefined,
    args: ArgsUserByEmail,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type MeResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type ChoresResolver = (
    parent: undefined,
    args: ArgsChores,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore[] | Promise<Chore[]>;

  export type UnvotedChoresResolver = (
    parent: undefined,
    args: ArgsUnvotedChores,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore[] | Promise<Chore[]>;

  export type MyUnvotedChoresResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Chore | null> | Promise<Array<Chore | null>>;

  export type SelectedHouseholdResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Household | null | Promise<Household | null>;

  export interface Type {
    chore: (
      parent: undefined,
      args: ArgsChore,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore | null | Promise<Chore | null>;

    household: (
      parent: undefined,
      args: ArgsHousehold,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Household | null | Promise<Household | null>;

    user: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    userByEmail: (
      parent: undefined,
      args: ArgsUserByEmail,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    me: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    chores: (
      parent: undefined,
      args: ArgsChores,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore[] | Promise<Chore[]>;

    unvotedChores: (
      parent: undefined,
      args: ArgsUnvotedChores,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore[] | Promise<Chore[]>;

    myUnvotedChores: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Chore | null> | Promise<Array<Chore | null>>;

    selectedHousehold: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Household | null | Promise<Household | null>;
  }
}

export namespace ChoreResolvers {
  export const defaultResolvers = {
    id: (parent: Chore) => parent.id,
    name: (parent: Chore) => parent.name,
    description: (parent: Chore) =>
      parent.description === undefined ? null : parent.description,
    todoState: (parent: Chore) => parent.todoState,
    dummy: (parent: Chore) =>
      parent.dummy === undefined ? null : parent.dummy,
    isUpnext: (parent: Chore) => parent.isUpnext,
    recurrenceType: (parent: Chore) => parent.recurrenceType,
    recurringNextOccurence: (parent: Chore) =>
      parent.recurringNextOccurence === undefined
        ? null
        : parent.recurringNextOccurence,
    recurringLastOccurence: (parent: Chore) =>
      parent.recurringLastOccurence === undefined
        ? null
        : parent.recurringLastOccurence,
    recurringWeekCadence: (parent: Chore) =>
      parent.recurringWeekCadence === undefined
        ? null
        : parent.recurringWeekCadence
  };

  export type IdResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EffortRatingsResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => EffortRating[] | Promise<EffortRating[]>;

  export type HouseholdResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Household | Promise<Household>;

  export type AssigneeResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type TodoStateResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoState | Promise<TodoState>;

  export type DummyResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type IsUpnextResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type RecurrenceTypeResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => RecurrenceType | Promise<RecurrenceType>;

  export type RecurringNextOccurenceResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RecurringLastOccurenceResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RecurringWeekCadenceResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type LockedToUserResolver = (
    parent: Chore,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    id: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    effortRatings: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => EffortRating[] | Promise<EffortRating[]>;

    household: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Household | Promise<Household>;

    assignee: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    todoState: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoState | Promise<TodoState>;

    dummy: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    isUpnext: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    recurrenceType: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => RecurrenceType | Promise<RecurrenceType>;

    recurringNextOccurence: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    recurringLastOccurence: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    recurringWeekCadence: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    lockedToUser: (
      parent: Chore,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;
  }
}

export namespace EffortRatingResolvers {
  export const defaultResolvers = {
    id: (parent: EffortRating) => parent.id,
    effort: (parent: EffortRating) => parent.effort
  };

  export type IdResolver = (
    parent: EffortRating,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: EffortRating,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type EffortResolver = (
    parent: EffortRating,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type ChoreResolver = (
    parent: EffortRating,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore | Promise<Chore>;

  export interface Type {
    id: (
      parent: EffortRating,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: EffortRating,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    effort: (
      parent: EffortRating,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    chore: (
      parent: EffortRating,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore | Promise<Chore>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    googleId: (parent: User) =>
      parent.googleId === undefined ? null : parent.googleId,
    email: (parent: User) => parent.email,
    givenName: (parent: User) =>
      parent.givenName === undefined ? null : parent.givenName,
    familyName: (parent: User) =>
      parent.familyName === undefined ? null : parent.familyName,
    name: (parent: User) => parent.name
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type GoogleIdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type HouseholdsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Household[] | Promise<Household[]>;

  export type ChoresResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore[] | Promise<Chore[]>;

  export type SelectedHouseholdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Household | null | Promise<Household | null>;

  export type GivenNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type FamilyNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LockedChoresResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Chore | null> | null | Promise<Array<Chore | null> | null>;

  export type InvitesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<Household | null> | null | Promise<Array<Household | null> | null>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    googleId: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    households: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Household[] | Promise<Household[]>;

    chores: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore[] | Promise<Chore[]>;

    selectedHousehold: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Household | null | Promise<Household | null>;

    givenName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    familyName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    lockedChores: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Chore | null> | null | Promise<Array<Chore | null> | null>;

    invites: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<Household | null>
      | null
      | Promise<Array<Household | null> | null>;
  }
}

export namespace HouseholdResolvers {
  export const defaultResolvers = {
    id: (parent: Household) => parent.id,
    name: (parent: Household) => parent.name
  };

  export interface ArgsChores {
    filter?: Array<ChoreStatus | null> | null;
  }

  export type IdResolver = (
    parent: Household,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Household,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type MembersResolver = (
    parent: Household,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type ChoresResolver = (
    parent: Household,
    args: ArgsChores,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore[] | Promise<Chore[]>;

  export type InvitesResolver = (
    parent: Household,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Array<User | null> | null | Promise<Array<User | null> | null>;

  export interface Type {
    id: (
      parent: Household,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Household,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    members: (
      parent: Household,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    chores: (
      parent: Household,
      args: ArgsChores,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore[] | Promise<Chore[]>;

    invites: (
      parent: Household,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<User | null> | null | Promise<Array<User | null> | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ChoreInput {
    name: string;
    description?: string | null;
    isUpnext: boolean;
    todoState?: TodoState | null;
    assignee?: string | null;
    recurrenceType: RecurrenceType;
    recurrenceInput?: AutomaticRecurrenceInput | null;
    lockedToUser?: LockedToUserInput | null;
    effort?: EffortInput | null;
  }
  export interface LockedToUserInput {
    userId: string;
    locked: boolean;
    choreId: string;
  }
  export interface AutomaticRecurrenceInput {
    nextOccurence?: string | null;
    weekCadence?: number | null;
  }
  export interface EffortInput {
    userId: string;
    effort: number;
    effortId?: string | null;
  }

  export interface ArgsCreateHousehold {
    name: string;
  }

  export interface ArgsCreateChore {
    input?: ChoreInput | null;
  }

  export interface ArgsCreateEffortRating {
    userId?: string | null;
    effort: number;
    choreId: string;
  }

  export interface ArgsCreateUser {
    name: string;
    email: string;
  }

  export interface ArgsSelectHousehold {
    householdId: string;
  }

  export interface ArgsAuthenticate {
    idToken?: string | null;
  }

  export interface ArgsUpdateChoreUpnextState {
    choreId: string;
    isUpnext: boolean;
  }

  export interface ArgsAssignChores {
    choresIds: string[];
  }

  export interface ArgsStartTodo {
    choreIds: string[];
  }

  export interface ArgsSetTodoState {
    choreId: string;
    state: TodoState;
  }

  export interface ArgsUpdateChore {
    choreId: string;
    input: ChoreInput;
  }

  export interface ArgsLockChoreToUser {
    input: LockedToUserInput;
  }

  export interface ArgsMoveChoresFromTodoToUpnext {
    householdId?: string | null;
  }

  export interface ArgsSetTodoStateBatch {
    choreIds: string[];
    state: TodoState;
  }

  export interface ArgsCreateInvite {
    email: string;
    householdId?: string | null;
  }

  export interface ArgsAddUserToHousehold {
    householdId: string;
  }

  export interface ArgsDeleteInvite {
    email: string;
    householdId?: string | null;
  }

  export type CreateHouseholdResolver = (
    parent: undefined,
    args: ArgsCreateHousehold,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Household | Promise<Household>;

  export type CreateChoreResolver = (
    parent: undefined,
    args: ArgsCreateChore,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore | Promise<Chore>;

  export type CreateEffortRatingResolver = (
    parent: undefined,
    args: ArgsCreateEffortRating,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore | Promise<Chore>;

  export type CreateUserResolver = (
    parent: undefined,
    args: ArgsCreateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type SelectHouseholdResolver = (
    parent: undefined,
    args: ArgsSelectHousehold,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type AuthenticateResolver = (
    parent: undefined,
    args: ArgsAuthenticate,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type UpdateChoreUpnextStateResolver = (
    parent: undefined,
    args: ArgsUpdateChoreUpnextState,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore | Promise<Chore>;

  export type AssignChoresResolver = (
    parent: undefined,
    args: ArgsAssignChores,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore[] | Promise<Chore[]>;

  export type StartTodoResolver = (
    parent: undefined,
    args: ArgsStartTodo,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type SetTodoStateResolver = (
    parent: undefined,
    args: ArgsSetTodoState,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore | Promise<Chore>;

  export type UpdateChoreResolver = (
    parent: undefined,
    args: ArgsUpdateChore,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore | Promise<Chore>;

  export type LockChoreToUserResolver = (
    parent: undefined,
    args: ArgsLockChoreToUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore | Promise<Chore>;

  export type MoveChoresFromTodoToUpnextResolver = (
    parent: undefined,
    args: ArgsMoveChoresFromTodoToUpnext,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore[] | Promise<Chore[]>;

  export type SetTodoStateBatchResolver = (
    parent: undefined,
    args: ArgsSetTodoStateBatch,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore[] | Promise<Chore[]>;

  export type CreateInviteResolver = (
    parent: undefined,
    args: ArgsCreateInvite,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type AddUserToHouseholdResolver = (
    parent: undefined,
    args: ArgsAddUserToHousehold,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type DeleteInviteResolver = (
    parent: undefined,
    args: ArgsDeleteInvite,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    createHousehold: (
      parent: undefined,
      args: ArgsCreateHousehold,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Household | Promise<Household>;

    createChore: (
      parent: undefined,
      args: ArgsCreateChore,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore | Promise<Chore>;

    createEffortRating: (
      parent: undefined,
      args: ArgsCreateEffortRating,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore | Promise<Chore>;

    createUser: (
      parent: undefined,
      args: ArgsCreateUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    selectHousehold: (
      parent: undefined,
      args: ArgsSelectHousehold,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    authenticate: (
      parent: undefined,
      args: ArgsAuthenticate,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    updateChoreUpnextState: (
      parent: undefined,
      args: ArgsUpdateChoreUpnextState,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore | Promise<Chore>;

    assignChores: (
      parent: undefined,
      args: ArgsAssignChores,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore[] | Promise<Chore[]>;

    startTodo: (
      parent: undefined,
      args: ArgsStartTodo,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    setTodoState: (
      parent: undefined,
      args: ArgsSetTodoState,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore | Promise<Chore>;

    updateChore: (
      parent: undefined,
      args: ArgsUpdateChore,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore | Promise<Chore>;

    lockChoreToUser: (
      parent: undefined,
      args: ArgsLockChoreToUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore | Promise<Chore>;

    moveChoresFromTodoToUpnext: (
      parent: undefined,
      args: ArgsMoveChoresFromTodoToUpnext,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore[] | Promise<Chore[]>;

    setTodoStateBatch: (
      parent: undefined,
      args: ArgsSetTodoStateBatch,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore[] | Promise<Chore[]>;

    createInvite: (
      parent: undefined,
      args: ArgsCreateInvite,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    addUserToHousehold: (
      parent: undefined,
      args: ArgsAddUserToHousehold,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    deleteInvite: (
      parent: undefined,
      args: ArgsDeleteInvite,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export interface ChoreFilter {
    households?: Array<string | null> | null;
    status?: Array<ChoreStatus | null> | null;
  }

  export interface ArgsChoreChanges {
    filter?: ChoreFilter | null;
  }

  export type ChoreChangesResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsChoreChanges,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<ChoreSubscriptionPayload>
      | Promise<AsyncIterator<ChoreSubscriptionPayload>>;
    resolve?: (
      parent: undefined,
      args: ArgsChoreChanges,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ChoreSubscriptionPayload | Promise<ChoreSubscriptionPayload>;
  };

  export interface Type {
    choreChanges: {
      subscribe: (
        parent: undefined,
        args: ArgsChoreChanges,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<ChoreSubscriptionPayload>
        | Promise<AsyncIterator<ChoreSubscriptionPayload>>;
      resolve?: (
        parent: undefined,
        args: ArgsChoreChanges,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => ChoreSubscriptionPayload | Promise<ChoreSubscriptionPayload>;
    };
  }
}

export namespace ChoreSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: ChoreSubscriptionPayload) => parent.mutation,
    node: (parent: ChoreSubscriptionPayload) => parent.node,
    updatedFields: (parent: ChoreSubscriptionPayload) => parent.updatedFields,
    previousValues: (parent: ChoreSubscriptionPayload) => parent.previousValues
  };

  export type MutationResolver = (
    parent: ChoreSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationType | Promise<MutationType>;

  export type NodeResolver = (
    parent: ChoreSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Chore | null | Promise<Chore | null>;

  export type UpdatedFieldsResolver = (
    parent: ChoreSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | null | Promise<string[] | null>;

  export type PreviousValuesResolver = (
    parent: ChoreSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ChorePreviousValues | null | Promise<ChorePreviousValues | null>;

  export interface Type {
    mutation: (
      parent: ChoreSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MutationType | Promise<MutationType>;

    node: (
      parent: ChoreSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Chore | null | Promise<Chore | null>;

    updatedFields: (
      parent: ChoreSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | null | Promise<string[] | null>;

    previousValues: (
      parent: ChoreSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ChorePreviousValues | null | Promise<ChorePreviousValues | null>;
  }
}

export namespace ChorePreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: ChorePreviousValues) => parent.id,
    name: (parent: ChorePreviousValues) => parent.name,
    description: (parent: ChorePreviousValues) =>
      parent.description === undefined ? null : parent.description,
    todoState: (parent: ChorePreviousValues) => parent.todoState,
    dummy: (parent: ChorePreviousValues) =>
      parent.dummy === undefined ? null : parent.dummy,
    isUpnext: (parent: ChorePreviousValues) => parent.isUpnext,
    recurrenceType: (parent: ChorePreviousValues) => parent.recurrenceType,
    recurringNextOccurence: (parent: ChorePreviousValues) =>
      parent.recurringNextOccurence === undefined
        ? null
        : parent.recurringNextOccurence,
    recurringLastOccurence: (parent: ChorePreviousValues) =>
      parent.recurringLastOccurence === undefined
        ? null
        : parent.recurringLastOccurence,
    recurringWeekCadence: (parent: ChorePreviousValues) =>
      parent.recurringWeekCadence === undefined
        ? null
        : parent.recurringWeekCadence,
    updatedAt: (parent: ChorePreviousValues) => parent.updatedAt,
    createdAt: (parent: ChorePreviousValues) => parent.createdAt
  };

  export type IdResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type TodoStateResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TodoState | Promise<TodoState>;

  export type DummyResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type IsUpnextResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type RecurrenceTypeResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => RecurrenceType | Promise<RecurrenceType>;

  export type RecurringNextOccurenceResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RecurringLastOccurenceResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RecurringWeekCadenceResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type UpdatedAtResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: ChorePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    todoState: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TodoState | Promise<TodoState>;

    dummy: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    isUpnext: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    recurrenceType: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => RecurrenceType | Promise<RecurrenceType>;

    recurringNextOccurence: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    recurringLastOccurence: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    recurringWeekCadence: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    updatedAt: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdAt: (
      parent: ChorePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Chore: ChoreResolvers.Type;
  EffortRating: EffortRatingResolvers.Type;
  User: UserResolvers.Type;
  Household: HouseholdResolvers.Type;
  Mutation: MutationResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
  ChoreSubscriptionPayload: ChoreSubscriptionPayloadResolvers.Type;
  ChorePreviousValues: ChorePreviousValuesResolvers.Type;
}
